<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>630</x><y>430</y><w>290</w><h>280</h></coordinates><panel_attributes>*Controller*
--
_*Attributes*_
-grid : Grid
-view : View
-map : String
-twoProb : float
-winCondition : int
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; Controller(View view, int win_condition, float twoProb)

+runAlgorithm(Algorithm algo) : void
+getGrid() : Grid
+process(List&lt;Actions&gt; actions) : void
+reset() : void
+play() : void

style=wordwrap
bg=blue

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>970</x><y>410</y><w>340</w><h>780</h></coordinates><panel_attributes>*Grid*
--
_*Attributes:*_
-twoProb : float
-history : GridHistory
-nodes : List&lt;Node&gt;
-columnSize : int
-rowSize : int
-rand : Random
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; Grid(String map, int win_condition, float twoProb)
&lt;&lt;constructor&gt;&gt; Grid(Grid grid)

-createNode(char symbol, Position pos) : Node
{exceptions=InvalidMapSymbolException}
-cloneNodes() : List&lt;Node&gt;
{excpetions=UnknownNodeTypeException}
-swap(Node node1, Node node2) : void
-clearMoveFlags() : void

+generateNewNode() : void
+slideUp(bool genNewNode = true) : void
+slideRight(bool genNewNode = true) : void
+slideDown(bool genNewNode = true) : void
+slideLeft(bool genNewNode = true) : void
+index(Position pos) : int
+indexUp(Position pos) : int
+indexRight(Position pos) : int
+indexDown(Position pos) : int
+indexLeft(Position pos) : int
+undo() : void
+redo() : void
+getNodes() : List&lt;Node&gt;
+getHistory() : GridHistory
+getRows() : int
+getCols() : int
+lost() : bool
+canMoveUp() : bool
+canMoveRight() : bool
+canMoveDown() : bool
+canMoveLeft() : bool
+won() : bool
+equals(Grid grid) : bool
+getEmptyNodes() : List&lt;EmptyNode&gt;
+setValueNode(Position pos, int value) : void
+setValueNode(ValueNode node) : void
+setValueNode(ValueNode node, bool flag) : void
+setEmptyNode(Position pos) : void
+stringify() : String
+hashCode() : int


style=wordwrap

bg=red
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1350</x><y>410</y><w>340</w><h>500</h></coordinates><panel_attributes>&lt;&lt;ABC&gt;&gt;
*Node*
--
_*Attributes:*_
#pos : Position
--
_*Functions:*_
&lt;&lt;static&gt;&gt; copyNode(Node node) : Node
&lt;&lt;constructor&gt;&gt; Node()
&lt;&lt;constructor&gt;&gt; Node(Position pos)
&lt;&lt;constructor&gt;&gt; Node(Node node)
&lt;&lt;constructor&gt;&gt; Node(Position pos, int value)

+&lt;&lt;abstract&gt;&gt; getType() : NodeType
+&lt;&lt;abstract&gt;&gt; getValue() : int
{exceptions=NoValueException}
+&lt;&lt;abstract&gt;&gt; setValue(int value) : void
+&lt;&lt;abstract&gt;&gt; toString() : String
+&lt;&lt;abstract&gt;&gt; getMoveFlag() : bool
{exceptions=NoMoveFlagException}
+&lt;&lt;abstract&gt;&gt; onMoveFlag() : void
+&lt;&lt;abstract&gt;&gt; offMoveFlag() : void
+&lt;&lt;abstract&gt;&gt; hashCode() : int

+getPos() : Position
+setPos(Position pos) : void
+canMove(Grid grid) : bool
+canMoveUp(Grid grid) : bool
+canMoveRight(Grid grid) : bool
+canMoveDown(Grid grid) : bool
+canMoveLeft(Grid grid) : bool
+equals(Node node) : bool
+stringify() : String



style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>650</x><y>830</y><w>220</w><h>110</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
*Algorithm*
--
_*Attributes:*_
--
_*Functions:*_
+run(Grid grid) : void

bg=red



</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>310</x><y>445</y><w>250</w><h>170</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
*View*
--
_*Attributes*_
--
_*Functions:*_
+getInput() : List&lt;Actions&gt;
+display(Grid grid) : void

bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>970</x><y>100</y><w>300</w><h>260</h></coordinates><panel_attributes>*GridHistory*
--
_*Attributes:*_
-instances : Stack&lt;Node[]&gt;
-temp : Stack&lt;Node[]&gt;
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; GridHistory(List&lt;Node&gt; initialState)
&lt;&lt;constructor&gt;&gt; GridHistory(GridHistory history)

-clearBuffer() : void

+undo() : List&lt;Node&gt;
{exceptions=EmptyGridHistoryException}
+redo() : List&lt;Node&gt; {exceptions=NoFutureGridException}
+add(List&lt;Node&gt; instance) : void

style=wordwrap

bg=red
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>585</y><w>260</w><h>140</h></coordinates><panel_attributes>*StdoutView*
--
_*Attributes*_
-scan : Scanner
--
_*Functions:*_
-convertStringToActions(String actionString) : List&lt;Actions&gt;
-clear() : String



style=wordwrap
bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1390</x><y>980</y><w>330</w><h>540</h></coordinates><panel_attributes>*Position*
--
_*Attributes:*_
-x : int
-y : int

-&lt;&lt;static&gt;&gt; x_max = -1;
-&lt;&lt;static&gt;&gt; x_min = 0;
-&lt;&lt;static&gt;&gt; y_max = -1;
-&lt;&lt;static&gt;&gt; y_min = 0;
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; Position(int x, int y)
{exceptions=MaxPosNotInitializedException}
&lt;&lt;constructor&gt;&gt; Position(Position pos)

+&lt;&lt;static&gt;&gt;setMax(int x_max, int y_max) : void

+getX() : int
+getY() : int

+moveUp() : void
{exceptions=MovingOutOfBoundsException}
+moveRight() : void
{exceptions=MovingOutOfBoundsException}
+moveDown() : void
{exceptions=MovingOutOfBoundsException}
+moveLeft() : void
{exceptions=MovingOutOfBoundsException}

+canMoveUp() : bool
+canMoveRight() : bool
+canMoveDown() : bool
+canMoveLeft() : bool
+toString() : String
+hashCode() : int


style=wordwrap
bg=red
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1300</x><y>630</y><w>70</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;50;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1520</x><y>900</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>1100</x><y>350</y><w>30</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;60;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>910</x><y>550</y><w>80</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;60;10</additional_attributes></element><element><id>Relation</id><coordinates><x>740</x><y>700</y><w>30</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;130</additional_attributes></element><element><id>Relation</id><coordinates><x>550</x><y>540</y><w>100</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>80;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>250</x><y>570</y><w>80</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>60;10;10;60</additional_attributes></element><element><id>UMLNote</id><coordinates><x>510</x><y>250</y><w>140</w><h>30</h></coordinates><panel_attributes>Controller
bg=blue
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>510</x><y>290</y><w>140</w><h>30</h></coordinates><panel_attributes>Model
bg=red
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>510</x><y>330</y><w>140</w><h>30</h></coordinates><panel_attributes>View
bg=green
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>280</x><y>700</y><w>260</w><h>220</h></coordinates><panel_attributes>&lt;&lt;enum&gt;&gt;
*Action*
--
SWIPE_UP
SWIPE_RIGHT
SWIPE_DOWN
SWIPE_LEFT
UNDO
REDO
RESET
NONE

_*Functions:*_
+&lt;&lt;static&gt;&gt;getAction(char chr) : Action

style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>360</x><y>600</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>430</x><y>650</y><w>220</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>200;10;10;10;10;50</additional_attributes></element><element><id>Relation</id><coordinates><x>490</x><y>380</y><w>530</w><h>90</h></coordinates><panel_attributes>lt=.&gt;</panel_attributes><additional_attributes>10;70;10;10;510;10;510;30</additional_attributes></element><element><id>UMLClass</id><coordinates><x>2000</x><y>0</y><w>350</w><h>330</h></coordinates><panel_attributes>*BrickNode*
--
_*Attributes:*_

--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; BrickNode()
&lt;&lt;constructor&gt;&gt; BrickNode(Position pos)
&lt;&lt;constructor&gt;&gt; BrickNode(BrickNode node)
&lt;&lt;constructor&gt;&gt; BrickNode(Node node)

+getType() : NodeType
+getValue() : int
{exceptions=NoValueException}
+setValue(int value) : void
+getMoveFlag() : bool
{exceptions=NoMoveFlagException}
+onMoveFlag() : void
+offMoveFlag() : void
+hashCode() : int
+toString() : String


style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2000</x><y>340</y><w>350</w><h>320</h></coordinates><panel_attributes>*EmptyNode*
--
_*Attributes:*_

--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; EmptyNode()
&lt;&lt;constructor&gt;&gt; EmptyNode(Position pos)
&lt;&lt;constructor&gt;&gt; EmptyNode(EmptyNode node)
&lt;&lt;constructor&gt;&gt; EmptyNode(Node node)

+getType() : NodeType
+getValue() : int
{exceptions=NoValueException}
+setValue(int value) : void
+getMoveFlag() : bool
{exceptions=NoMoveFlagException}
+onMoveFlag() : void
+offMoveFlag() : void
+hashCode() : int
+toString() : String



style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2000</x><y>670</y><w>410</w><h>360</h></coordinates><panel_attributes>*ValueNode*
--
_*Attributes:*_
-value : int
-moveFlag : bool
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; Node()
&lt;&lt;constructor&gt;&gt; Node(Position pos)
&lt;&lt;constructor&gt;&gt; Node(ValueNode node)
&lt;&lt;constructor&gt;&gt; Node(Node node)
&lt;&lt;constructor&gt;&gt; Node(Position pos, int value)


+getType() : NodeType
+getValue() : int
{exceptions=NoValueException}
+setValue(int value) : void
+getMoveFlag() : bool
{exceptions=NoMoveFlagException}
+onMoveFlag() : void
+offMoveFlag() : void
+hashCode() : int
+toString() : String

style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1680</x><y>260</y><w>340</w><h>350</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;330;320;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1680</x><y>600</y><w>340</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;40;320;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1680</x><y>680</y><w>340</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;320;70</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1730</x><y>150</y><w>240</w><h>110</h></coordinates><panel_attributes>&lt;&lt;enum&gt;&gt;
*NodeType*
--
BRICK
EMPTY
VALUE

bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>550</x><y>1140</y><w>280</w><h>240</h></coordinates><panel_attributes>*TreeGeneratorMDP*
--
_*Attributes:*_
-
_*Functions:*_
&lt;&lt;constructor&gt;&gt; TreeGeneratorMDP(Grid grid, float twoProb)

-dive(Grid grid, Stack&lt;TreeDFSNode&gt; history, HashMap&lt;Integer, SolTableItem&gt; map) : void

+getMapRef() : HashMap&lt;Integer, SolTableItem&gt; 
+save(String fileName) : void


style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>150</x><y>1140</y><w>320</w><h>390</h></coordinates><panel_attributes>*TreeDFSNode*
--
_*Attributes:*_
--
-bestAction : Action
-bestReward : float
-expSumReward : float
-action : Action
-posi : LinkedList&lt;ValueNode&gt;
-posiNum : int
-grid : Grid
-posi : List&lt;EmptyNode&gt;
-posiNum : int
-twoProb : float
-fourProb : float
--
_*Functions:*_
&lt;&lt;constructor&gt;&gt; TreeDFSNode(Grid grid, float twoProb)
+setMaxReward(float reward) : void
+updateMaxReward(float reward) : void
+setNextPosi(Grid grid) : void
+getAction() : Action
+getBestAction() : Action
+getBestReward() : float
+setAction(Action action) : void
+getExpectedReward() : float
+isPosiEmpty() : bool



style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1680</x><y>250</y><w>110</w><h>240</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;220;90;220;90;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>370</x><y>1060</y><w>230</w><h>60</h></coordinates><panel_attributes>These classes are indepdendent from the main project for now

style=wordwrap

bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>560</x><y>1470</y><w>240</w><h>180</h></coordinates><panel_attributes>*SolTableItem*
--
*_Attributes:_*
-action : Action
-reward : float
--
*_Functions:_*
&lt;&lt;constructor&gt;&gt; SolTableItem(Action action, float reward)

+getAction() : Action
+getReward() : float
style=wordwrap
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>460</x><y>1260</y><w>110</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>90;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>1370</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element></diagram>